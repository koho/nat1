// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: conf.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Stun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "Stun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "Stun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetServices()) < 1 {
		err := ConfigValidationError{
			field:  "Services",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	oneofNsPresent := false
	switch v := m.Ns.(type) {
	case *Config_Dnspod:
		if v == nil {
			err := ConfigValidationError{
				field:  "Ns",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofNsPresent = true

		if all {
			switch v := interface{}(m.GetDnspod()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Dnspod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigValidationError{
						field:  "Dnspod",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDnspod()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigValidationError{
					field:  "Dnspod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofNsPresent {
		err := ConfigValidationError{
			field:  "Ns",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Dns != nil {

		if !strings.Contains(m.GetDns(), ":") {
			err := ConfigValidationError{
				field:  "Dns",
				reason: "value does not contain substring \":\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on DNSPod with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DNSPod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DNSPod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DNSPodMultiError, or nil if none found.
func (m *DNSPod) ValidateAll() error {
	return m.validate(true)
}

func (m *DNSPod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := DNSPodValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := DNSPodValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DNSPodMultiError(errors)
	}

	return nil
}

// DNSPodMultiError is an error wrapping multiple validation errors returned by
// DNSPod.ValidateAll() if the designated constraints aren't met.
type DNSPodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DNSPodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DNSPodMultiError) AllErrors() []error { return m }

// DNSPodValidationError is the validation error returned by DNSPod.Validate if
// the designated constraints aren't met.
type DNSPodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DNSPodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DNSPodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DNSPodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DNSPodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DNSPodValidationError) ErrorName() string { return "DNSPodValidationError" }

// Error satisfies the builtin error interface
func (e DNSPodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDNSPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DNSPodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DNSPodValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateHostname(m.GetDomain()); err != nil {
		err = ServiceValidationError{
			field:  "Domain",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Service_Network_InLookup[m.GetNetwork()]; !ok {
		err := ServiceValidationError{
			field:  "Network",
			reason: "value must be in list [tcp udp]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.Contains(m.GetLocal(), ":") {
		err := ServiceValidationError{
			field:  "Local",
			reason: "value does not contain substring \":\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Target

	// no validation rules for Hint

	// no validation rules for Params

	// no validation rules for Https

	// no validation rules for Rid

	// no validation rules for A

	if m.Priority != nil {

		if m.GetPriority() <= 0 {
			err := ServiceValidationError{
				field:  "Priority",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

func (m *Service) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

var _Service_Network_InLookup = map[string]struct{}{
	"tcp": {},
	"udp": {},
}

// Validate checks the field values on Stun with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Stun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stun with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StunMultiError, or nil if none found.
func (m *Stun) ValidateAll() error {
	return m.validate(true)
}

func (m *Stun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTcp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StunValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StunValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTcp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StunValidationError{
				field:  "Tcp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUdp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StunValidationError{
					field:  "Udp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StunValidationError{
					field:  "Udp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUdp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StunValidationError{
				field:  "Udp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Interval != nil {

		if m.GetInterval() <= 0 {
			err := StunValidationError{
				field:  "Interval",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return StunMultiError(errors)
	}

	return nil
}

// StunMultiError is an error wrapping multiple validation errors returned by
// Stun.ValidateAll() if the designated constraints aren't met.
type StunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StunMultiError) AllErrors() []error { return m }

// StunValidationError is the validation error returned by Stun.Validate if the
// designated constraints aren't met.
type StunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StunValidationError) ErrorName() string { return "StunValidationError" }

// Error satisfies the builtin error interface
func (e StunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StunValidationError{}

// Validate checks the field values on Stun_TCP with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stun_TCP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stun_TCP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Stun_TCPMultiError, or nil
// if none found.
func (m *Stun_TCP) ValidateAll() error {
	return m.validate(true)
}

func (m *Stun_TCP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	// no validation rules for KeepaliveUrl

	if len(errors) > 0 {
		return Stun_TCPMultiError(errors)
	}

	return nil
}

// Stun_TCPMultiError is an error wrapping multiple validation errors returned
// by Stun_TCP.ValidateAll() if the designated constraints aren't met.
type Stun_TCPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stun_TCPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stun_TCPMultiError) AllErrors() []error { return m }

// Stun_TCPValidationError is the validation error returned by
// Stun_TCP.Validate if the designated constraints aren't met.
type Stun_TCPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stun_TCPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stun_TCPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stun_TCPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stun_TCPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stun_TCPValidationError) ErrorName() string { return "Stun_TCPValidationError" }

// Error satisfies the builtin error interface
func (e Stun_TCPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStun_TCP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stun_TCPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stun_TCPValidationError{}

// Validate checks the field values on Stun_UDP with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stun_UDP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stun_UDP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Stun_UDPMultiError, or nil
// if none found.
func (m *Stun_UDP) ValidateAll() error {
	return m.validate(true)
}

func (m *Stun_UDP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Addr

	if len(errors) > 0 {
		return Stun_UDPMultiError(errors)
	}

	return nil
}

// Stun_UDPMultiError is an error wrapping multiple validation errors returned
// by Stun_UDP.ValidateAll() if the designated constraints aren't met.
type Stun_UDPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Stun_UDPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Stun_UDPMultiError) AllErrors() []error { return m }

// Stun_UDPValidationError is the validation error returned by
// Stun_UDP.Validate if the designated constraints aren't met.
type Stun_UDPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Stun_UDPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Stun_UDPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Stun_UDPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Stun_UDPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Stun_UDPValidationError) ErrorName() string { return "Stun_UDPValidationError" }

// Error satisfies the builtin error interface
func (e Stun_UDPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStun_UDP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Stun_UDPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Stun_UDPValidationError{}
